---
import { Github, Moon, NotebookText, Rss, Sun, Handshake } from "lucide-react";
import { Config } from "~/config";
import type { Menu } from "~/types/config";
import { removeSlash } from "~/utils/common";

const processMenuItem = (menu: Menu) => {
  if (!menu.children?.length) {
    return {
      title: menu.title,
      url: menu.url,
      icon: menu.icon,
    };
  }

  const [firstChild] = menu.children;
  return {
    title: menu.title,
    url: `/${removeSlash(menu.url)}-${removeSlash(firstChild.url)}/${menu.key}`,
    key: menu.key,
  };
};

const mainMenus = Config.menus.map(processMenuItem);
---

<div class="navbar px-6 md:px-20 absolute top-0 left-0 bg-base-300 z-10" >
  <div class="navbar-start">
    <a class="text-xl" href="/">
      {Config.base.title}
    </a>
  </div>
  <div class="navbar-end">
    {
      mainMenus.map((menu) => (
        <a class="btn btn-ghost btn-circle hidden md:flex" href={menu.url}>
          {menu.title}
        </a>
      ))
    }
    {
      mainMenus.map((menu) => (
        <a class="btn btn-ghost btn-circle  md:hidden" href={menu.url}>
          {menu.key === "blog" && <NotebookText size={20} />}
          {menu.key === "partnerLink" && <Handshake size={20}/>}
        </a>
      ))
    }
    <a
      class="btn btn-ghost btn-circle hidden md:flex"
      href={Config.social.github}
    >
      <Github size={20} />
    </a>
    <a class="btn btn-ghost btn-circle hidden md:flex" href={"/rss.xml"}>
      <Rss size={20} />
    </a>
    <switch-theme>
      <label class="swap swap-rotate btn btn-ghost btn-circle" id="switchTheme">
        <input type="checkbox" />
        <Moon size={20} className="swap-on" />
        <Sun size={20} className="swap-off" />
      </label>
    </switch-theme>
  </div>
</div>

<script>
  import { themeAtom } from "~/store";

  class ThemeSwitcher extends HTMLElement {
    private themeLabel: HTMLLabelElement | null = null;
    private themeInput: HTMLInputElement | null = null;

    constructor() {
      super();
      this.initTheme();
    }

    private getSystemTheme(): "light" | "dark" {
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    private initTheme(): "light" | "dark" {
      const localTheme = window.localStorage.getItem("theme");
      return localTheme === "auto"
        ? this.getSystemTheme()
        : (localTheme as "light" | "dark") || "light";
    }

    private updateTheme(theme: "light" | "dark"): void {
      document.documentElement.classList.toggle("dark", theme === "dark");
      document.documentElement.style.colorScheme = theme;
      document.documentElement.setAttribute("data-theme", theme);
      this.themeLabel?.classList.toggle("swap-active", theme === "light");
      themeAtom.set(theme);
    }

    private async animateThemeTransition(x: number, y: number): Promise<void> {
      const currentTheme = this.initTheme();
      const radius = Math.hypot(
        Math.max(x, innerWidth - x),
        Math.max(y, innerHeight - y)
      );

      const clipPath = [
        `circle(0px at ${x}px ${y}px)`,
        `circle(${radius}px at ${x}px ${y}px)`,
      ];

      try {
        await document.documentElement.animate(
          { clipPath: currentTheme === "dark" ? clipPath.reverse() : clipPath },
          {
            duration: 350,
            easing: "ease-out",
            pseudoElement:
              currentTheme === "dark"
                ? "::view-transition-old(root)"
                : "::view-transition-new(root)",
          }
        ).finished;
      } catch (error) {
        console.error("Animation failed:", error);
      }
    }

    connectedCallback(): void {
      this.themeLabel = this.querySelector("label");
      this.themeInput = this.querySelector("input");

      if (!this.themeLabel || !this.themeInput) {
        console.error("Required elements not found");
        return;
      }

      const currentTheme = this.initTheme();
      this.updateTheme(currentTheme);

      this.themeInput.addEventListener("click", async (event) => {
        const currentTheme = this.initTheme();
        const newTheme = currentTheme === "dark" ? "light" : "dark";

        try {
          const transition = document.startViewTransition(async () => {
            this.updateTheme(newTheme);
            window.localStorage.setItem("theme", newTheme);
          });

          await transition.ready;
          const rect = this.themeLabel?.getBoundingClientRect();
          if (rect) {
            await this.animateThemeTransition(rect.x, rect.y);
          }
        } catch (error) {
          console.error("Theme switch failed:", error);
          // 回退方案
          this.updateTheme(newTheme);
          window.localStorage.setItem("theme", newTheme);
        }
      });
    }

    disconnectedCallback(): void {
      this.themeInput?.removeEventListener("click", () => {});
    }
  }

  customElements.define("switch-theme", ThemeSwitcher);
</script>
